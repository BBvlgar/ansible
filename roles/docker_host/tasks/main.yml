---

- name: prepare the installation
  block:

    - name: Install all prerequisite tools needed for this install routine
      package:
        name: "{{ item.name }}"
        state: "{{ item.state | default( package_state) }}"
      with_items: "{{ install_docker.prerequisites }}"

    - name: Add the official Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker APT repository
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/{{ansible_distribution|lower}} {{ansible_distribution_release}} stable
        state: present
        update_cache: yes

    - name: Install all tools needed for Docker to run
      package:
        name: "{{ item.name }}"
        state: "{{ item.state | default( package_state) }}"
      with_items: "{{ install_docker.tools }}"

    - name: Verify that docker works
      command: docker run --rm hello-world

  become: yes

- name: Set pull credentials as root user
  become: true
  command: docker login -u {{ docker_pull_user }} -p {{ docker_pull_password }}
  when: docker_pull_user is defined and docker_pull_password is defined

- name: install pip packages, force upgrade
  pip:
    name: "{{ pip_list }}"
    executable: pip3
    state: latest
  vars:
    pip_list:
      - setuptools
      - pip
      - virtualenv
      - chardet
      - docker
      - docker-compose

- name: Provision AWS-Templates
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  with_items: "{{ install_docker.aws_templates }}"
  when: aws_key is defined

# - name: Install mount script when encrypted_data exists
#   template: src=mount.encrypted_data dest=/usr/local/bin/mount.encrypted_data mode=755 owner=root group=root
#   when: encrypted_data is defined

- name: Ensure service is (re)started
  service:
    name: docker
    state: restarted
  become: yes

- name: increase aio-max-nr to prevent db_container limit
  sysctl:
    name:  'fs.aio-max-nr'
    value: '1048576'
    state: present
    reload: yes
  become: yes

# ensure Docker starting after network is online since network
# shares are used from time to time for binds and mounts
- name: ensure Docker starting after network by systemd
  copy:
    src:   'docker.service.d/override.conf'
    dest:  '/etc/systemd/system/docker.service.d/'
    owner: root
    group: root
    mode:  '0644'
  become: yes

# normally, this step should not be necessary due to systemd deprecating runlevel â€“
# but without it did not work properly ...
- name: prepare runlevel as well
  become: true
  command: rm /etc/rc{1..3}.d/*docker
  ignore_errors: yes

- name: Retrieve latest docker-compose information
  uri: 
    url: "https://api.github.com/repos/docker/compose/releases/latest"
    method: "GET"
    return_content: yes
    status_code: 200
    body_format: json
  register: docker_compose_version_info

- name: Install docker-compose
  become: yes
  get_url:
    url : "https://github.com/docker/compose/releases/download/{{ docker_compose_version_info.json.tag_name }}/docker-compose-Linux-x86_64"
    dest: "/usr/local/bin/docker-compose"
    mode: "u+x,g+x"

...
