---

- name: Ensure dependencies are installed
  package:
    name: "{{ item.name }}"
    state: "{{ item.state | default( package_state) }}"
  with_items: "{{ ssh_tools }}"

- name: secure key
  file:
    path:  /etc/ssh/ssh_host_rsa_key
    mode:  400
    owner: root
    group: root

# The variable `ssh_users` will be used within the template `sshd_config`!
#
# `ssh_users` is empty by default (`all.yml` and even the roles defaults) and
# can be overwritten by specific group_vars or even host_vars files!
- name: Define ssh users from admins and explicitly defined ssh_users
  set_fact:
    ssh_users: "{{ ssh_users|default([]) + [ item.name ] }}"
  with_items: "{{ admins }}"
  # the `when` below limits the execution to two conditions that are combined by
  # a logical `AND`:
  # First of all check, if we really use users instead of groups for ssh
  # authentification.
  # Then,  if there is an admin defined within the `admins` variable and
  # it is not empty – this first check doesn't even check if `admins` is an
  # array or not, it only checks for sth. else than `FALSE`, `NONE`, `EMPTY` or
  # `UNDEFINED`.
  # The third check looks for users that are not allowed to use SSH at all by
  # definition.
  # The last condition checks – for each loop through the `admins` array – if
  # the defined username of the current admin (`item.name`) is not within the
  # relevant instance of `disallowed_users` array.
  # The `disallowed_users` array is defined with defaults within the `all.yml`
  # group_vars file, is fully emptied for the servers of the `alladmins`
  # inventory group within the `alladmins.yml` group_vars file and can be
  # overridden for each server in its corresponding host_vars file.
  when:
    - ssh_users_instead_groups is defined and ssh_users_instead_groups
    - admins
    - item.name not in nossh_users|default([])
    - item.name not in disallowed_users|default([])

- name: Write sshd config
  template:
    src:    sshd_config.j2
    dest:   /etc/ssh/sshd_config
    owner:  root
    group:  root
    mode:   0644
    backup: no
  notify:
    - restart ssh

- name: Open needed ports for Mosh in firewall
  command: ufw allow 60000:61000/udp
  register: ufw_fail
  ignore_errors: True

- name: 'log message if ufw command fails'
  fail:
    msg: 'ufw command failed – probably you want to run `sudo update-alternatives --set iptables /usr/sbin/iptables-legacy` and reboot before you retry (if `update-alternatives --list iptables` shows you two results) ...'
  when: "'ERROR' in ufw_fail.stderr"

...
