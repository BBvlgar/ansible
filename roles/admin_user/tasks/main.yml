---

# Sometimes it is usefull to allow admin users to be defined per host.
# For realising that, the variable `hostadmins` can be defined.
- name: 'merge all admins into the admins variable'
  set_fact:
    admins: "{{ admins + hostadmins | default([]) }}"

- name: Grant admin & sudo to admins
  user: name={{ item.name }}
        shell=/bin/bash
        groups=adm,sudo
        append=yes
        state=present
        password={{ item.password|default() }}
  with_items: "{{ admins }}"
  # the `when` below limits the execution to two conditions that are combined by
  # a logical `AND`:
  # First of all if there is an admin defined within the `admins` variable and
  # it is not empty – this first check doesn't even check if `admins` is an
  # array or not, it only checks for sth. else than `FALSE`, `NONE`, `EMPTY` or
  # `UNDEFINED`.
  # The second condition checks – for each loop through the `admins` array – if
  # the defined username of the current admin (`item.name`) is not within the
  # relevant instance of `restricted_admins` array.
  # The `restricted_admins` array is defined with defaults within the `all.yml`
  # group_vars file, is fully emptied for the servers of the `alladmins`
  # inventory group within the `alladmins.yml` group_vars file and can be
  # overridden for each server in its corresponding host_vars file.
  when:
    - admins
    - item.name not in restricted_admins|default([])

# The SSH keys for admin users / SSH users are stored within the file
# `$Home/.ssh/authorized_keys` for each user by default. To centralize that
# storage location, our setup wants to place the keys within the folder defined
# by the variable `ssh_authorized_keys_dir`.
- name: Create parent folder for SSH keys
  file: path={{ ssh_authorized_keys_dir }}
        owner=root
        group=root
        mode=0755
        state=directory

- name: Create folders for authorized keys
  file: path={{ ssh_authorized_keys_dir }}/{{ item.name }}
        owner={{ item.name}}
        group=root
        mode=0755
        state=directory
  with_items: "{{ admins }}"
  when:
    - admins
    - item.name not in restricted_admins|default([])

- name: Write ssh public keys to authorized keys files
  authorized_key:
    user: "{{ item.name }}"
    key: "{{ item.pub_key }}"
    path: "{{ ssh_authorized_keys_dir }}/{{ item.name }}/authorized_keys"
  with_items: "{{ admins }}"
  when:
    - admins
    - item.name not in restricted_admins|default([])

...
